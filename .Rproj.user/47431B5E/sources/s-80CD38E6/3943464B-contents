---
title: "Advanced R for Econometricians"
subtitle: "Advanced R Concepts"
author: "Martin Arnold"
date: "`r Sys.Date()`"
output:
  xaringan::moon_reader:
    css: ["default", "../assets/sydney-fonts.css", "../assets/sydney.css", "../assets/title_slides.css", "../xaringan_files/custom.css"]
    self_contained: false # if true, fonts will be stored locally
    seal: false # show a title slide with YAML information
    includes:
      in_header: "../assets/mathjax-equation-numbers.html"
      after_body: "../assets/copybutton.html"
    nature:
      beforeInit: ["../assets/remark-zoom.js", "../xaringan_files/macros.js", "https://platform.twitter.com/widgets.js"]
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '16:9' # alternatives '16:9' or '4:3' or others e.g. 13:9
      navigation:
        scroll: false # disable slide transitions by scrolling
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
options(htmltools.dir.version = FALSE)
# packages needed
library(lobstr)
```

class: title-slide title-rintro center middle

# `r rmarkdown::metadata$title`
## `r rmarkdown::metadata$subtitle`
### `r rmarkdown::metadata$author`

---
## Overview

Make sure the `lobstr` package is attached!

- Bindings / References / Copy-on-modify

---
## Assigment Operators (?)

.smaller[

`<-` is often used for assignment but some people use `=` instead. There is, however, a subtle difference in how they are evaluated when mixed in the same expression. 

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: operator *precedence* of `<-` and `=`

.medium[

```{r, error=TRUE}
a <- b <- 1
a == b
a = b = 1
a == b
a = b <- 1
a == b
x <- b = 1
```

]]]

???

- This really is just a convention and nothing precludes using `=` instead of `<-` for assignment

- Fact: `<-` comes from a time where there actually was a `<-` key on keyboards.

---
## Assigment Operators (?)

- For consistency we (have and) will use `<-` for assignment and `=` for function argument binding.

- Note, however, that there are reasonable [proposals](http://www.win-vector.com/blog/2016/12/the-case-for-using-in-r/comment-page-1/) for using other conventions.

<br>
.content-box-white[
**Task:** 

Find out what `->` does and think of an application where it might be useful.

*Hint:* Experiment to find out about the precedence relation between `<-`, `->` and `=`.
]

???

Precedence relation is `->` >> `<-` >> `=` so `x <- 1 -> b` is another working alternative to the last line on the previous slide.

---
## Bindings

.smaller[

Knowing assigment does internally is crucial for understanding performance and memory usage of your code and R's functional programming tools.

So what happens if we define a vector `x`? The idiom *'the object `x` stores the vector'* is not quite right. 

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: binding a vector

**Binding** means that the name has a value: `x` is a **reference** to a value living in the computer's memory.

.pull-left[
  ![:image 40%](img/binding-1.png)
  <br>
  ![:image 40%](img/binding-2.png)
  ![:source 2019](Wickham)
]
.pull-right[
  ```{r}
  x <- c(1, 2, 3)
  ```
  <br>
  ```{r}
  y <- x
  ```
]]]

---
## Bindings &mdash; Character Vectors

A `character` vector is a binding to a vector of strings.

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: binding a `character` vector

.smaller[

.pull-left[
  <br>
  ![:image 55%](img/character.png)
  ![:image 55%](img/character-2.png)
  ![:source 2019](Wickham)
]
.pull-right[
```{r}
x <- c("a", "a", "abc", "d")
obj_size(x)
obj_sizes("a", "a", "abc", "d")
```
]]]

---
## Copy-on-modify

.smaller[

R's copy-on-modify behaviour is blessing and curse: we generally may use references to an object without the risk of breaking existing code.

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: copy-on-modify

Modifying a reference triggers a copy of the value.

.pull-left[
  <br>
  <br>
  <br>
  <br>
  ![:image 40%](img/binding-3.png)
  ![:source 2019](Wickham)
]
.pull-right[
.smaller[
```{r}
x <- c(1, 2, 3)
y <- x

y[[3]] <- 4
x
```

```{r}
obj_addr(x)
obj_addr(y)
```
]
]]]

???

- This is very different for many other languages, including c++ which we will see later during the course.

- Question: object addresses (like `0x7f9ef3059d38`) will be different if rhe code is re-run. Why?

---
## Copy-on-modify

.smaller[

We may use `tracemem()` to obtain info when a copy of an object is generated.

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: `tracemem()`

`tracemem()` returns the copied object, the new address and the **call stack**

```{r}
x <- c(1, 2, 3)
tracemem(x)
y <- x
y[[3]] <- 4
y[[3]] <- 5

# stop tracking
untracemem(x)
```

]]

---
## Copy-on-modify &mdash; Function Calls

.smaller[

The above rules apply to function calls as well.

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: `tracemem()`

.pull-left[
  <br>
  <br>
  ![:image 70%](img/binding-f1.png)
  ![:source 2019](Wickham)
]
.pull-right[
```{r}
f <- function(a) a
x <- c(1, 2, 3)
tracemem(x)

z <- f(x) # no copy here!

untracemem(x)
```
]]]

---
## Copy-on-modify &mdash; Function Calls

.smaller[

<br>
<br>

.content-box-white[
**Task:** 

Predict what is returned if the highlighted line gets executed.

```r
f <- function(a) {
  a[[1]] <- 0
}

x <- c(1, 2, 3)
tracemem(x)

*z <- f(x)

untracemem(x)
```
]]

---
## Copy-on-modify &mdash; Lists

.smaller[

Lists are special: list elements are references to values.

<br>
.content-box-white[
**Task:** 

Which code statement generates the result shown in each diagramm? What is special about the last one?

.pull-left[
  ![:image 35%](img/list.png)
]
.pull-right[
  ![:image 35%](img/l-modify-1.png)
]
![:image 20%](img/l-modify-2.png)
![:source 2019](Wickham)
]]

???

```r
l1 <- list(1, 2, 3)
l2 <- l1
l2[[3]] <- 4
```

Copy-on-modify results in a **shallow** copy: the bindings are copied, not the values. => performance considerations!

---
## Copy-on-modify &mdash; Lists

<br>
.content-box-white[

You may check your predictions using `lobstr::ref()`.

```{r, echo=4}
l1 <- list(1, 2, 3)
l2 <- l1
l2[[3]] <- 4
ref(l1, l2)
```

]

---
## Copy-on-modify &mdash; Data frames

.smaller[

Data frames are list objects whose elements point to column vectors. 

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: `data.frame()`

.pull-left[
![:image 40%](img/dataframe.png)
]
.pull-right[
```r
d1 <- data.frame(
  x = c(1, 5, 6), 
  y = c(2, 4, 3)
)
```
]]
<br>
.content-box-white[
**Task**: Explain why modifying a row is more costly than changing a column.
]]

---
## Exercises

.smaller[

1. Why is `tracemem(1:10)` not useful?

2. Explain why `tracemem() shows two copies when you run this code. *Hint:* carefully look at the difference between this code and the code shown earlier in the section.
    ```r
    x <- c(1L, 2L, 3L)
    tracemem(x)
    
    x[[3]] <- 4
    ```

3. Explain the below results.
    ```{r}
    obj_size(1:10)
    obj_size(1:1e6)
    ```

]

---
## Modify-in-place

.smaller[

R modifies-in-place if

- the object has only a single binding

- the object is an environment

.blockquote.exercise[
#### `r icon::fa("desktop")` Example: optimized modification

```r
v <- c(1, 2, 3)
ref(v)
v[[2]] <- 4
# check that v points to the same memory location
ref(v)
```

]]

---
class: segue-red
### Part I

